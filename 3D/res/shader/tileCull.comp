#version 430 compatibility
#extension GL_NV_gpu_shader5 : enable
#extension GL_ARB_compute_shader : enable
//#extension GL_ARB_compute_variable_group_size : enable
#extension GL_ARB_bindless_texture : enable

struct PointLight
{
	vec4 posRad;
	vec4 colQuad;
	vec4 linearFadeTexHandle;
	mat4 pv[6];
};

struct SpotLight
{
	vec4 posRad;
	vec4 dirInner;
	vec4 colOuter;
	vec4 linQuadTex;
	uvec4 fadeData;
	mat4 pv;
	
};

uniform layout(location = 0) uint pointLightCount;
layout(std430, binding=0) buffer PointLightBuffer
{
	PointLight pointLights[];
};

uniform layout(location = 1) uint spotLightCount;
layout(std430, binding=1) buffer SpotLightBuffer
{
	SpotLight spotLights[];
};

layout(std140, binding=6) buffer InstanceIDBuffer
{
	uint id[];
};

uniform uint selectedID;

//layout(local_size_variable) in;
layout(local_size_x=16, local_size_y=16, local_size_z=1) in;

#define MAX_LIGHTS_PER_TILE 128

layout(binding=2, rgba32f) uniform writeonly image2D outColour;
layout(binding=3, rg16f) uniform readonly image2D gNormal;

layout(binding=4, rgba8) uniform readonly image2D gAlbedoSpec;
layout(binding=5) uniform sampler2D gDepth;
layout(binding=15) uniform samplerCube skybox;
layout(binding=6, rgba8) uniform readonly image2D ssao;

layout(binding=14) uniform sampler2D tttt;

uniform layout(location = 9) vec3 viewPos;
uniform layout(location = 10) vec4 viewRays;
uniform mat4 proj;
uniform layout(location = 8) mat4 view;
uniform float exposure = 1.f;

uniform int renderMode;

shared uint maxZ;
shared uint minZ;

shared uint farZMin;
shared uint nearZMax;

shared uint tilePointLightIndices[MAX_LIGHTS_PER_TILE];
shared uint currentTilePointLightIndex;

shared uint tileSpotLightIndices[MAX_LIGHTS_PER_TILE];
shared uint currentTileSpotLightIndex;

f16vec3 decode (f16vec2 enc)
{
    f16vec2 fenc = enc*(float16_t)4.f-(float16_t)2.f;
    float16_t f = dot(fenc,fenc);
    float16_t g = sqrt((float16_t)1.f-f/(float16_t)4.f);
    f16vec3 n;
    n.xy = fenc*g;
    n.z = (float16_t)1.f-f/(float16_t)2.f;
    return n;
}

#define A shoulderStrength
#define B linearStrength
#define C linearAngle
#define D toeStrength
#define E toeNumerator
#define F toeDenominator
#define W linearWhite

/*float A = 0.15;
float B = 0.50;
float C = 0.10;
float D = 0.20;
float E = 0.02;
float F = 0.30;
float W = 11.2;*/

float A = 0.22;
float B = 0.30;
float C = 0.10;
float D = 0.20;
float E = 0.01;
float F = 0.30;
float W = 11.2;

vec3 tonemap(vec3 x)
{
	return vec3(((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F);
}

vec3 finalTone(vec3 x)
{
	return (tonemap(x))/(tonemap(vec3(W,W,W)));
}

#define FAR 1000000.f

bool sphereVsAABB(vec3 sphereCenter, float radius, vec3 AABBCenter, vec3 AABBHalfSize)
{
	vec3 delta = max(vec3(0.f), abs(AABBCenter - sphereCenter) - AABBHalfSize);
	float distSq = dot(delta, delta);
	return distSq <= radius * radius;
}

void main()
{
	uvec2 renderSize = textureSize(gDepth, 0);

	uvec3 gid = gl_GlobalInvocationID;
	ivec2 pixel = ivec2(gid.xy);
	
	uint localID = gl_LocalInvocationIndex;

	f16vec2 normalEnc = f16vec2(imageLoad(gNormal, pixel).rg);
	f16vec3 normal16 = decode(normalEnc);
	vec3 normal = vec3(normal16);

	float depth = texelFetch(gDepth, pixel, 0).r;

	uint z = floatBitsToInt(depth);

	if(localID == 0)
	{
		minZ = 0xFFFFFFFF;
		maxZ = 0;
		currentTilePointLightIndex = 0;
		currentTileSpotLightIndex = 0;
	}

	barrier();

	if(z != 1)
	{
		atomicMax(maxZ, z);
		atomicMin(minZ, z);
	}

	//barrier();
	
	if(localID == 0)
	{
		farZMin = maxZ;
		nearZMax = minZ;
	}

	barrier();

	float maxZf = uintBitsToFloat(maxZ);
	float minZf = uintBitsToFloat(minZ);


	uint halfZ = floatBitsToUint(minZf + ((maxZf - minZf) / 2));

	if(z != 1)
	{
		if(z > halfZ)
		{
			atomicMin(farZMin, z);
		}
		else
		{
			atomicMax(nearZMax, z);
		}
	}

	//barrier();

	float farZMinf = uintBitsToFloat(farZMin);
	float nearZMaxf = uintBitsToFloat(nearZMax);

	float minZView = exp2(minZf * log2(FAR + 1.0)) - 1.f;
	float maxZView = exp2(maxZf * log2(FAR + 1.0)) - 1.f;

	float farZMinView = exp2(farZMinf * log2(FAR + 1.0)) - 1.f;
	float nearZMaxView = exp2(nearZMaxf * log2(FAR + 1.0)) - 1.f;

	vec3 viewRay;
	viewRay.x = mix(viewRays.z, viewRays.x, float(pixel.x)/renderSize.x);
	viewRay.y = mix(viewRays.w, viewRays.y, float(pixel.y)/renderSize.y);

	viewRay = vec3(view * vec4(viewRay.xy,1.f,1.f));

	float zView = exp2(depth * log2(FAR + 1.0)) - 1.f;

	vec3 worldPos = viewPos + (viewRay * -zView);

	//vec3 oCol = worldPos;
	//imageStore(outColour, pixel, vec4(oCol,1.f));

	const uvec3 groupID = gl_WorkGroupID;

	//barrier();

	float xMixRatio1 = float(gl_WorkGroupID.x)/(float(renderSize.x)/float(gl_WorkGroupSize.x));
	float yMixRatio1 = float(gl_WorkGroupID.y)/(float(renderSize.y)/float(gl_WorkGroupSize.y));

	float xMixRatio2 = float(gl_WorkGroupID.x+1)/(float(renderSize.x)/float(gl_WorkGroupSize.x));
	float yMixRatio2 = float(gl_WorkGroupID.y+1)/(float(renderSize.y)/float(gl_WorkGroupSize.y));

	//FAR LIGHTS
	vec3 viewRayTLFar;
	viewRayTLFar.x = mix(viewRays.z, viewRays.x, xMixRatio1);
	viewRayTLFar.y = mix(viewRays.w, viewRays.y, yMixRatio1);
	viewRayTLFar.z = 1.f;

	mat3 m3View = mat3(view);

	//viewRayTLFar = vec3(mat3(view) * vec3(viewRayTLFar.xy,1.f));
	viewRayTLFar = m3View * vec3(viewRayTLFar);

	vec3 viewRayBRFar;
	viewRayBRFar.x = mix(viewRays.z, viewRays.x, xMixRatio2);
	viewRayBRFar.y = mix(viewRays.w, viewRays.y, yMixRatio2);
	viewRayBRFar.z = 1.f;

	//viewRayBRFar = vec3(mat3(view) * vec3(viewRayBRFar.xy,1.f));
	viewRayBRFar = m3View * vec3(viewRayBRFar);

	vec3 TLFar = viewPos + (viewRayTLFar * -maxZView);
	vec3 BRFar = viewPos + (viewRayBRFar * -farZMinView);

	vec3 AABBFarHalfSize = (abs(BRFar - TLFar) / 2.f);
	vec3 AABBFarCenter = BRFar - (BRFar - TLFar) / 2.f;
	//FAR LIGHTS

	//NEAR LIGHTS
	vec3 viewRayTLNear;
	viewRayTLNear.x = mix(viewRays.z, viewRays.x, xMixRatio1);
	viewRayTLNear.y = mix(viewRays.w, viewRays.y, yMixRatio1);
	viewRayTLNear.z = 1.f;

	//viewRayTLNear = vec3(mat3(view) * vec3(viewRayTLNear.xy,1.f));
	viewRayTLNear = m3View * vec3(viewRayTLNear);

	vec3 viewRayBRNear;
	viewRayBRNear.x = mix(viewRays.z, viewRays.x, xMixRatio2);
	viewRayBRNear.y = mix(viewRays.w, viewRays.y, yMixRatio2);
	viewRayBRNear.z = 1.f;

	//viewRayBRNear = vec3(mat3(view) * vec3(viewRayBRNear.xy,1.f));
	viewRayBRNear = m3View * vec3(viewRayBRNear);

	vec3 TLNear = viewPos + (viewRayTLNear * -nearZMaxView);
	vec3 BRNear = viewPos + (viewRayBRNear * -minZView);

	vec3 AABBNearHalfSize = (abs(BRNear - TLNear) / 2.f);
	vec3 AABBNearCenter = BRNear - (BRNear - TLNear) / 2.f;
	//NEAR LIGHTS

	uint threadCount = gl_WorkGroupSize.x*gl_WorkGroupSize.y;
	uint passCount = (pointLightCount + threadCount - 1) / threadCount;

	vec3 oCol = vec3(0.f);

	for(uint i = 0; i < passCount; ++i)
	{	
		uint lightIndex =  (i * threadCount) + gl_LocalInvocationIndex;

		if(lightIndex > pointLightCount)
			continue;

		vec4 lightPos = pointLights[lightIndex].posRad;
		float rad = lightPos.w;

		bool inFrustum = sphereVsAABB(lightPos.xyz, rad, AABBFarCenter, AABBFarHalfSize) || sphereVsAABB(lightPos.xyz, rad, AABBNearCenter, AABBNearHalfSize);

		if(inFrustum)
		{
			uint nextTileLightIndex = atomicAdd(currentTilePointLightIndex,1);
			tilePointLightIndices[nextTileLightIndex] = lightIndex;
		}
	}

	passCount = (spotLightCount + threadCount - 1) / threadCount;
	
	for(uint i = 0; i < passCount; ++i)
	{
		uint lightIndex =  (i * threadCount) + gl_LocalInvocationIndex;

		if (lightIndex > spotLightCount)
			continue;

		vec4 lightPos = spotLights[lightIndex].posRad;
		float rad = lightPos.w * 0.5;
		lightPos.xyz = lightPos.xyz + (spotLights[lightIndex].dirInner.xyz * rad);

		bool inFrustum = sphereVsAABB(lightPos.xyz, rad, AABBFarCenter, AABBFarHalfSize) || sphereVsAABB(lightPos.xyz, rad, AABBNearCenter, AABBNearHalfSize);

		if (inFrustum)
		{
			uint nextTileLightIndex = atomicAdd(currentTileSpotLightIndex,1);
			tileSpotLightIndices[nextTileLightIndex] = lightIndex;
		}
	}

	barrier();

	float ssaoVal = imageLoad(ssao, pixel.xy).r;
	vec4 albedoSpec = imageLoad(gAlbedoSpec, pixel.xy);

	albedoSpec.xyz = albedoSpec.xyz * ssaoVal;
	
	vec3 viewDir = viewRay;

	oCol += albedoSpec.xyz * 0.01;

	for(uint j = 0; j < currentTilePointLightIndex; ++j)
	{
		uint i = tilePointLightIndices[j];
		vec4 lightPos = pointLights[i].posRad;
		vec4 lightCol = pointLights[i].colQuad;
		vec4 linearFadeTexHandle = pointLights[i].linearFadeTexHandle;
		float linearAtt = linearFadeTexHandle.x;
		float quadAtt = lightCol.w;

		vec3 lightDir = normalize(lightPos.xyz - worldPos);  
		float diff = max(dot(normal, lightDir), 0.0);
		vec3 diffuse  = lightCol.xyz * diff * albedoSpec.xyz;  
		vec3 halfwayDir = normalize(lightDir + viewDir);
		float spec = pow(max(dot(normal, halfwayDir), 0.0),  64.f); 
		vec3 specular = lightCol.xyz * spec * albedoSpec.a;

		vec3 fragToLight = worldPos - lightPos.xyz; 

		float currentDepth = length(fragToLight);
	    
	    float bias = max(4.f * (1.0 - dot(normal, lightDir)), 1.f);

	    float shadow = 0.f;

		float samples = 2.0;
		float offset = 0.3;

		float camToLight = length(lightPos.xyz - viewPos);

		uint fadeLength = floatBitsToUint(linearFadeTexHandle.y) >> 16;
		uint fadeStart = floatBitsToUint(linearFadeTexHandle.y) & 0x0000FFFF;

		if (camToLight < (float)fadeStart + (float)fadeLength)
		{
			for(float x = -offset; x < offset; x += offset / (samples * 0.5))
			{
			    for(float y = -offset; y < offset; y += offset / (samples * 0.5))
			    {
			        for(float z = -offset; z < offset; z += offset / (samples * 0.5))
			        {
			        	uvec2 handle = uvec2(floatBitsToUint(linearFadeTexHandle.z),floatBitsToUint(linearFadeTexHandle.w));
			            float closestDepth = texture(samplerCube(handle), fragToLight + vec3(x, y, z)).r; 
			            closestDepth *= lightPos.w;   // Undo mapping [0;1]
			            if(currentDepth - bias > closestDepth)
			                shadow += 1.0;
			        }
			    }
			}

			shadow /= (samples * samples * samples);
		}

		if (camToLight > (float)fadeStart && camToLight < (float)fadeStart + (float)fadeLength)
		{
			shadow *= ((float)fadeLength - (camToLight - (float)fadeStart)) / (float)fadeLength;
		}

        float distance = currentDepth;
		float attenuation = 1.f / (1.f + linearAtt * distance + quadAtt * distance * distance);
		diffuse *= attenuation;
		specular *= attenuation;

		oCol +=  (1.f - shadow) * (specular + diffuse);
	}

	for(uint j = 0; j < currentTileSpotLightIndex; ++j)
	{
		float shadow = 0.f;

		uint i = tileSpotLightIndices[j];
		vec4 posRad = spotLights[i].posRad;
		vec4 dirInner = spotLights[i].dirInner;
		vec4 colOuter = spotLights[i].colOuter;
		vec4 linQuadTex = spotLights[i].linQuadTex;
		uint fadeData = spotLights[i].fadeData.x;

		vec3 lightDir = normalize(posRad.xyz - worldPos);  
		float theta = dot(lightDir, normalize(-dirInner.xyz));
		float epsilon =  dirInner.w - colOuter.w;
		float intensity = clamp((theta - colOuter.w) / epsilon, 0.0, 1.0); 

		float diff = max(dot(normal, lightDir), 0.0);
		vec3 diffuse = colOuter.xyz  * diff * albedoSpec.xyz;  
		vec3 halfwayDir = normalize(lightDir + viewDir);
		float spec = pow(max(dot(normal, halfwayDir), 0.0), 64.f); 
		vec3 specular = colOuter.xyz * spec * albedoSpec.a;

		float distance = length(posRad.xyz - worldPos);
		float attenuation = 1.f / (1.f + linQuadTex.x * distance + linQuadTex.y * distance * distance);
		diffuse *= attenuation * intensity;
		specular *= attenuation * intensity;

		vec4 fragPosLightSpace = spotLights[i].pv * vec4(worldPos,1.f);

		vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
		projCoords = projCoords * 0.5 + 0.5;

		float currentDepth = projCoords.z;
	    
	    float bias = max(0.0005f * (1.0 - dot(normal, lightDir)), 0.000005f);

    	const int pres = 2;

		float camToLight = length(posRad.xyz - viewPos);

		uint fadeLength = fadeData >> 16;
		uint fadeStart = fadeData & 0x0000FFFF;

		if (camToLight < (float)fadeStart + (float)fadeLength)
		{
			vec2 texelSize = vec2(1.0 / 512.f);
			for(int x = -pres; x <= pres; ++x)
			{
			    for(int y = -pres; y <= pres; ++y)
			    {
			    	uvec2 handle = uvec2(floatBitsToUint(linQuadTex.z),floatBitsToUint(linQuadTex.w));

					float pcfDepth = texture(sampler2D(handle), projCoords.xy + vec2(x, y) * texelSize).r; 
			        shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
			    }
			}
			shadow /= ((2.f*pres) + 1) * ((2.f*pres) + 1);
		}

		if (camToLight > (float)fadeStart && camToLight < (float)fadeStart + (float)fadeLength)
		{
			shadow *= ((float)fadeLength - (camToLight - (float)fadeStart)) / (float)fadeLength;
		}

		if(projCoords.z > 1.0)
        	shadow = 0.0;

		oCol += (1.f - shadow)*(specular + diffuse);
	}

	vec3 lightDir = normalize(vec3(0.0f,1.f,0.0f));
	float diff = max(dot(normal, lightDir),0.0);
	vec3 dirDiffuse = vec3(0.1f) * diff * albedoSpec.xyz;
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(normal, halfwayDir), 0.0), 16);
	vec3 dirSpecular = vec3(0.1f) * spec * albedoSpec.w;

	vec4 skyCol = vec4(0.0f);

	if(depth == 1.f)
	{
		skyCol = texture(skybox, -viewDir);
	}

	oCol += skyCol.xyz;
	
	vec4 finalColour;

	if (renderMode == 0)
		finalColour = vec4(finalTone(exposure * oCol),1.f);
	else if (renderMode == 1)
		finalColour = vec4(albedoSpec.xyz,1.f);
	else if (renderMode == 2)
		finalColour = vec4(normal*0.5 + 0.5,1.f);
	else if (renderMode == 3)
		finalColour = vec4(vec3(ssaoVal),1.f);
	else if (renderMode == 4)
		finalColour = vec4(vec3(depth),1.f);

	imageStore(outColour, pixel, finalColour);
}